{namespace docsInlineEvents}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Inline Events</h1>

		<p>Another feature Metal.js has that can be very useful is the ability to declare events inside templates, directly on the desired element. Besides being simple and intuitive, this feature allows Metal.js to handle attaching events itself, and so this can be done in the best way possible, with <a href="https://learn.jquery.com/events/event-delegation/">delegates</a> for example, without the user having worry about that at all.</p>

		<p>By using SoyComponent, for example, you can add inline listeners like this:</p>

		<textarea class="code" data-mode="x-soy">{literal}
&lbrace;template .button&rbrace;
    &lt;button id="&lbrace;$id&rbrace;-button" data-onclick="handleClick"&gt;&lt;/button&gt;
&lbrace;/template&rbrace;{/literal}</textarea>

		<p>Then, you just need to define a <code>handleClick</code> method on your component, and it will be called whenever the event is triggered.</p>

		<p>It's also possible to add multiple functions to listen to the same event on the same element, by just separating them by commas. For example:</p>

		<textarea class="code" data-mode="x-soy">{literal}
&lbrace;template .button&rbrace;
	&lt;button id="&lbrace;$id&rbrace;-button" data-onclick="handleClick,anotherHandleClick"&gt;&lt;/button&gt;
&lbrace;/template&rbrace;{/literal}</textarea>

		<p>Now both the <code>handleClick</code> and the <code>anotherHandleClick</code> methods will be called on your component for each click on that button.</p>
	{/param}
{/call}
{/template}
