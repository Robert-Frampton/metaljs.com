{namespace docsAttributes}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Attributes</h1>

		<p>The <strong>Attribute</strong> class provides a way of defining attributes for the classes that extend it, as well as watching these attributes for value changes.</p>

		<p>The following example is a class that extends from Attribute and defines an attribute named <code>foo</code> on itself:</p>

		<textarea class="code" data-mode="javascript">{literal}
import Attribute from 'bower:metal/src/attribute/Attribute';

class MyAttributes extends Attribute {
    constructor(opt_config) {
        super(opt_config);
    }
}

MyAttributes.ATTRS = {
    foo: {
        value: 'Initial value'
    }
}{/literal}</textarea>

		{call .afterExample}
			{param attrName: 'foo' /}
			{param className: 'MyAttributes' /}
		{/call}
	{/param}
{/call}
{/template}

/**
 * Content added after an Attribute example.
 * @param attrName
 * @param className
 */
{template .afterExample}
	<p>If you're familiar with <a href="http://yuilibrary.com/">YUI</a>, you may recognize this feature and notice that it's very similar to how attributes are defined there. You basically just need to list all attributes you'll be using on the ATTRS static variable, and provide their configuration options, like initial value and validator. For a list of all valid options, take a look at Attribute's <a href="https://github.com/metal/metal.js/blob/master/src/attribute/Attribute.js#L45">docs</a>.</p>

	<p>The constructor can receive a configuration object with initial values to use for its attributes. You can access or change an object's attributes in the same way you'd access or change any object property.</p>

	<textarea class="code" data-mode="javascript">
		var obj = new {{$className}}();{\n}
		console.log(obj.{{$attrName}}); {literal}// Prints 'Initial value'{/literal}{\n}{\n}

		obj.{$attrName} = 'New value';{\n}
		console.log(obj.{{$attrName}}); {literal}// Prints 'New value'{/literal}
	</textarea>

	<p>You can also track attribute value changes by listening to the appropriate event.</p>

	<textarea class="code" data-mode="javascript">
		obj.on('{{$attrName}}Changed', function(event) {lb}
  {literal}
// event.prevVal has the previous value.
// event.newVal has the new value.
{/literal}{rb});</textarea>

	<p>To see all features of the <strong>Attribute</strong> class take a look at its <a href="https://github.com/metal/metal.js/blob/master/test/src/attribute/Attribute.js">unit tests</a>.</p>
{/template}
