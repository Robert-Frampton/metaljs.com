{namespace docsOverwritingTemplateElements}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Overwriting Template Elements</h1>

		<p>Writing templates for your SoyComponent is easy. You just need to add the contents of your component to the <strong>.content</strong> template and, optionally, split it into more templates that will be updated automatically for you when the mapped params change. For example:</p>

		<textarea class="code" data-mode="x-soy">{literal}
&lbrace;namespace Templates.MyComponent&rbrace;

/**
 * This renders the component's whole content.
 */
&lbrace;template .content&rbrace;
  &lbrace;call .body data="all" /&rbrace;
  &lbrace;call .footer data="all" /&rbrace;
&lbrace;/template&rbrace;

/**
 * This renders the body part of the component.
 * @param bodyContent
 */
&lbrace;template .body&rbrace;
  &lt;p&gt;&lbrace;$bodyContent&rbrace;&lt;/p&gt;
&lbrace;/template&rbrace;

/**
 * This renders the footer part of the component.
 * @param footerContent
 */
&lbrace;template .footer&rbrace;
  &lt;footer&gt;&lbrace;$footerContent&rbrace;&lt;/footer&gt;
&lbrace;/template&rbrace;{/literal}</textarea>

		<p>If you inspect the rendered html for a component with this template though, you'll notice that each of the three template contents were wrapped in a <strong>div</strong> element that wasn't defined in any of the templates. Metal.js does this automatically so it can quickly find each of the component parts later when updates are needed.</p>

		<p>In most cases this will be fine. Sometimes you may need more control over this wrapper element though, like customizing it to use a different tag or attributes, or making sure that your soy template can render the whole component correctly to help with progressive enhancement.</p>

		<p>In those cases you can just overwrite the wrapper on your templates. Metal.js first looks for the wrapper inside the template's content, creating it only when it's not present. The only thing necessary for Metal.js to recognize the wrapper is having the appropriate id. For the <strong>.content</strong> template the id should be the component's id, and for the others it should be in the format: <code>&lt;componentId&gt;-&lt;templateName&gt;</code>. So for the template named <strong>.body</strong> the id should be <code>&lt;componentId&gt;-body</code>.</p>

		<p>This is how the previous example would look like when overwriting wrappers:</p>

		<textarea class="code" data-mode="x-soy">{literal}
&lbrace;namespace Templates.MyComponent&rbrace;

/**
 * This renders the component's whole content.
 * @param id
 * @param elementClasses
 */
&lbrace;template .content&rbrace;
  &lt;div id="{$id}" class="{$elementClasses}" data-foo="bar"&gt;
    &lbrace;call .body data="all" /&rbrace;
    &lbrace;call .footer data="all" /&rbrace;
  &lt;/div&gt;
&lbrace;/template&rbrace;

/**
 * This renders the body part of the component.
 * @param bodyContent
 * @param id
 */
&lbrace;template .body&rbrace;
  &lt;p id="{$id}-body"&gt;&lbrace;$bodyContent&rbrace;&lt;/p&gt;
&lbrace;/template&rbrace;

/**
 * This renders the footer part of the component.
 * @param footerContent
 */
&lbrace;template .footer&rbrace;
  &lt;footer id="{$id}-footer"&gt;&lbrace;$footerContent&rbrace;&lt;/footer&gt;
&lbrace;/template&rbrace;{/literal}</textarea>

		<h2>Templates called multiple times</h2>

		<p>In those examples each template was only ever called once inside its component. What if a template is called multiple times though? We all know that ids should be unique, so we can't have the wrappers for all these elements have the same one.</p>

		<p>In those cases to be able to define the wrapper we have to make use of the <strong>surfaceId</strong> param. That's an optional param that you can pass to a template call which replaces the template name in the wrapper's id. Using this you can call the same template as many times as you need to, while still customizing the wrapper element. The following example shows how this works:</p>

		<textarea class="code" data-mode="x-soy">{literal}
&lbrace;namespace Templates.MyComponent&rbrace;

/**
 * This renders the component's whole content.
 * @param id
 * @param elementClasses
 */
&lbrace;template .content&rbrace;
  &lt;ul id="{$id}" class="{$elementClasses}"&gt;
  	&lbrace;call .item data="all"&rbrace;
  		&lbrace;param surfaceId: 'item1' /&rbrace;
  		&lbrace;param text: 'Item 1' /&rbrace;
  	&lbrace;/call&rbrace;
  	&lbrace;call .item data="all"&rbrace;
  		&lbrace;param surfaceId: 'item2' /&rbrace;
  		&lbrace;param text: 'Item 2' /&rbrace;
  	&lbrace;/call&rbrace;
  &lt;/ul&gt;
&lbrace;/template&rbrace;

/**
 * This renders the body part of the component.
 * @param id
 * @param surfaceId
 * @param text
 */
&lbrace;template .item&rbrace;
  &lt;li id="{$id}-{$surfaceId}"&gt;&lbrace;$text&rbrace;&lt;/li&gt;
&lbrace;/template&rbrace;{/literal}</textarea>
	{/param}
{/call}
{/template}
