{namespace docsState}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>State</h1>

		<p>The <strong>State</strong> class provides a way of defining state properties for the classes that extend it, as well as watching these properties for value changes.</p>

		<p>The following example is a class that extends from <strong>State</strong> and defines a state property named <code>foo</code> on itself:</p>

		<textarea class="code" data-mode="javascript">{literal}
import State from 'metal-state';

class MyState extends State {
    constructor(opt_config) {
        super(opt_config);
    }
}

MyState.STATE = {
    foo: {
        value: 'Initial value'
    }
}{/literal}</textarea>

		{call .afterExample}
			{param className: 'MyState' /}
			{param stateKey: 'foo' /}
		{/call}
	{/param}
{/call}
{/template}

/**
 * Content added after a State example.
 * @param className
 * @param stateKey
 */
{template .afterExample}
	<p>If you're familiar with <a href="http://yuilibrary.com/">YUI</a>, you may recognize this feature and notice that it's very similar to how attributes are defined there. You basically just need to list all attributes you'll be using on the <strong>STATE</strong> static variable (on YUI it would be on <strong>ATTRS</strong>), and provide their configuration options, like initial value and validator. For a list of all valid options, take a look at <strong>State</strong>'s <a href="https://github.com/metal/metal-state/blob/master/src/State.js#L83">docs</a>.</p>

	<p>The constructor can receive a configuration object with initial values to use for its state properties. You can access or change an object's state in the same way you'd access or change any object property.</p>

	<textarea class="code" data-mode="javascript">
		var obj = new {{$className}}();{\n}
		console.log(obj.{{$stateKey}}); {literal}// Prints 'Initial value'{/literal}{\n}{\n}

		obj.{$stateKey} = 'New value';{\n}
		console.log(obj.{{$stateKey}}); {literal}// Prints 'New value'{/literal}
	</textarea>

	<p>You can also track state value changes by listening to the appropriate event.</p>

	<textarea class="code" data-mode="javascript">
		obj.on('{{$stateKey}}Changed', function(event) {lb}
  {literal}
// event.prevVal has the previous value.
// event.newVal has the new value.
{/literal}{rb});</textarea>

	<p>To see all features of the <strong>State</strong> class take a look at its <a href="https://github.com/metal/metal-state/blob/master/test/State.js">unit tests</a>.</p>
{/template}
