{namespace docsIndex}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Getting Started</h1>
		<p>
			There are many different ways to build components using Metal.js. You can
			use the built-in integrations with <strong>soy</strong> or
			<strong> JSX</strong> templates, or even build your own template abstraction on
			top of Metal.js and use it instead. You can build the ES6 code using
			<strong> babel</strong>, <strong>traceur</strong> or any other transpiler.
			You can test using <strong>karma</strong>, <strong>jasmine</strong> or any
			other test framework, and can use any directory structure for your
			project. To sum it up, you can customize everything to your own needs. The
			world is your oyster.
		</p>
		<p>
			This guide will focus on a quick and easy way to get started with
			Metal.js, using a Yeoman generator that will prepare the project structure
			and workflow for you.
		</p>

		<h2 id="generator">Using generator-metal</h2>

		<p>We've built a <a href="https://www.npmjs.com/package/generator-metal">Yeoman generator</a> for creating the initial project structure together with some useful dependencies. To use it:</p>

		<ol>
			<li><p>Install <a href="https://nodejs.org">NPM</a> v3.0.0 or newer</p></li>
			<li>
				<p>Install <strong>Yeoman</strong> and <strong>generator-metal</strong>:</p>
				<p><code>[sudo] npm i -g yo generator-metal</code></p>
			</li>
			<li>
				<p>
					Open the folder that you want to use on your terminal and type: <code>yo metal</code>
				</p>
			</li>
			<li>
				<p>Answer the generator prompts:</p>
				<img src="../images/docs/prompts.png" width="500"><br>
				<p>
					Make sure to type <strong>Modal </strong>
					as the component's name and choose either <strong>Soy</strong> or
					<strong> JSX</strong> as the template language (don't worry, we'll always
					provide examples for both templates during this guide). Use the default
					for all other questions.
				</p>
			</li>
			<li><p>Wait for the generator to finish fetching dependencies</p></li>
		</ol>

		<p>After those steps you'll get a directory tree similar to this:</p>

		<textarea class="code" data-mode="javascript">{literal}├── demos
│   └── index.html
├── node_modules
├── package.json
├── src
│   ├── Modal.js
│   ├── Modal.soy // Only if Soy was chosen
│   └── modal.scss
└── test
    └── Modal.js{/literal}</textarea>

		<h2>Build</h2>

		<p>
			If you open the generated <strong>src/Modal.js</strong> file you may
			notice that it's using
			<a href="https://babeljs.io/docs/learn-es2015/"> ES6</a> syntax:
		</p>

		<textarea class="code" data-mode="javascript">{literal}class Modal extends ...{/literal}
		</textarea>

		<p>
			That means that it'll need to go through a build process, since browsers
			haven't fully implemented all ES6 features yet.
		</p>
		<p>
			<strong>generator-metal</strong> already prepares some useful scripts that
			you can use, including a build script. By default, this script will build
			everything into global variables. To use it, simply type: <code>npm run build</code>
		</p>

		<h2>Demo Page</h2>

		<p>
			Now that the code was built, just open the generated
			<strong> demos/index.html</strong> file on your browser. It should display
			a nice <strong>Hello World</strong> message, like this:
			<br><br>
			<img src="../images/docs/hello_world.png" width="100">
		</p>

		<p>
			If you look at <strong>demos/index.html</strong>'s contents you'll see
			how the component is being rendered. In this example, it's simply being
			instantiated directly by calling <code>new metal.Modal();</code>.
		</p>

		<h2>Hello World</h2>

		<p>
			As you've noticed, the generated project automatically renders
			<strong> Hello World</strong> for you. Curious to see how that's done?
			It's simple, just take a look at the generated template:
		</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/Modal.soy', 'JSX: src/Modal.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="x-soy">{literal}&lbrace;namespace Modal&rbrace;

/**
 * This renders the component's whole content.
 * Note: has to be called ".render".
 */
&lbrace;template .render&rbrace;
  &lt;div&gt;Hello World&lt;/div&gt;
&lbrace;/template&rbrace;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">{literal}import JSXComponent from 'metal-jsx';

class Modal extends JSXComponent {
	render() &lbrace;
		return &lt;div&gt;Hello World&lt;/div&gt;;
	}
}

export default Modal;{/literal}
				</textarea>
			{/param}
		{/call}

		<p>
			You can replace the default content with any other to change what your
			component renders. Just make sure to build the code again after making
			your changes.
		</p>

		<h2>Next steps</h2>

		<p>
			Now that you have gone through running a simple
			<strong> Hello World</strong> component, let's actually turn it into a
			<strong> Modal</strong>.
		</p>

		<p><strong><a href="/docs/modal.html">↪ Tutorial: Modal</a></strong></p>
	{/param}
{/call}
{/template}
